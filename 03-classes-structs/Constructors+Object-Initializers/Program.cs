// See https://aka.ms/new-console-template for more information
//System.Console.WriteLine("Hey there");

namespace Experiment
{
  /* *****************
   * 
   * Classes
   * 
   * Classes are declared by using the class keyword
   * 
   * *****************/
   
  public class Animal
  {
    // constructor
    public Animal()
    { }

    public Animal(int age)
    {
      this.age = age;
    }

    // property
    public string? Name { get;set; }

    // field
    private int age;

    // method
    public string Moves()
    {
      return $"{Name} is moving";
    }
  }
  
  /* *****************
   * 
   * Static classes
   * 
   * A static class is basically the same as a non-static class
   * but a static class cannot be instantiated. It can be 
   * defined by using the static keyword:
   * 
   * *****************/

  public class Car
  {
    public static int NumberOfWheels = 4;
        
    public static void Drive()
    {
      Console.WriteLine("Car go brr brr.");
    }
  }
    
  /* *****************
   * 
   * Partial classes
   * 
   * You can extend a class in another section of code by 
   * marking the class with the partial keyword.
   * 
   * Partial classes are often used when extending a class 
   * that you have no control over and you can not change.
   * 
   * *****************/

   public partial class Employee
   {
     public void DoWork()
     {
       Console.WriteLine("It's time to work.");   
     }
   }

  public partial class Employee
  {
    public void GoToLunch()
    {
      Console.WriteLine("It's time to eat."); 
    }
  }

  // Main

  public class Program
  {
    static void Main()
    {
      // 1
      Animal a1 = new Animal();

      // 2
      Animal a2 = new Animal(10);

      // There are 2 ways for us to set the Name property on a new Animal that we create:

      // i
      Animal lion = new Animal();
      lion.Name = "Simba";

      // ii - Object initializers
      Animal cat = new Animal()
      { 
        Name = "Grumpy Cat"
      };

      Console.WriteLine("Remember who you are " + lion.Name);
      Console.WriteLine(cat.Name + " says 'Mondays, am I right?'");

      // Static cars
      Console.WriteLine();
      Console.WriteLine("How many wheels does a car have? " + Car.NumberOfWheels);
      Car.Drive();

      Employee squidward = new Employee();

      Console.WriteLine();
      squidward.DoWork();
      squidward.GoToLunch();

      /* *****************
       * 
       * Anonymous types
       * 
       * Anonymous types provide a convenient way to encapsulate 
       * a set of read-only properties into a single object
       * without having to explicitly define a type first. 
       * 
       * The type name is generated by the compiler and is 
       * not available at the source code level.
       * 
       * *****************/

      var what = new { Amount = 42, Message = "Do not be afraid." };

      Console.WriteLine();
      Console.WriteLine(what.Amount + " " + what.Message);

      Console.WriteLine("\nPress any key to exit.");
      Console.ReadKey();

    }  
  }
}